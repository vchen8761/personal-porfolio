{"version":3,"sources":["App.js","serviceWorker.js","index.js","resume.pdf"],"names":["App","className","id","src","alt","href","icon","faGithub","size","title","faLinkedin","faEnvelope","Resume","target","rel","faFilePdf","faBook","faTint","faPaintRoller","faIdBadge","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"6SAoEeA,MA1Df,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKC,GAAG,YACN,yBAAKA,GAAG,UAAUC,IAAI,qBAAqBC,IAAI,KAC/C,yBAAKH,UAAU,eACb,wBAAIC,GAAG,QAAP,kBAEF,uBAAGA,GAAG,WAAN,kPAKA,yBAAKA,GAAG,SACN,uBAAGG,KAAK,gCAA+B,kBAAC,IAAD,CAAiBC,KAAMC,IAAUC,KAAK,KAAKP,UAAU,OAAOQ,MAAM,wBACzG,uBAAGJ,KAAK,4CAA2C,kBAAC,IAAD,CAAiBC,KAAMI,IAAYF,KAAK,KAAKP,UAAU,OAAOQ,MAAM,8BACvH,uBAAGJ,KAAK,8BAA6B,kBAAC,IAAD,CAAiBC,KAAMK,IAAYH,KAAK,KAAKP,UAAU,OAAOQ,MAAM,uBACzG,uBAAGJ,KAAMO,IAAQC,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAiBR,KAAMS,IAAWP,KAAK,KAAKP,UAAU,OAAOQ,MAAM,cAGlI,yBAAKP,GAAG,YACN,yBAAKD,UAAU,QACb,yBAAKA,UAAU,iBAAgB,kBAAC,IAAD,CAAiBK,KAAMU,IAAQR,KAAK,QACnE,yBAAKP,UAAU,wBACb,0DACA,kNACA,uBAAGI,KAAK,uDAAR,oBAGJ,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,iBAAgB,kBAAC,IAAD,CAAiBK,KAAMW,IAAQT,KAAK,QACnE,yBAAKP,UAAW,wBACd,+CACA,qMACA,uBAAGI,KAAK,gDAAR,qBAGJ,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,iBAAgB,kBAAC,IAAD,CAAiBK,KAAMY,IAAeV,KAAK,QAC1E,yBAAKP,UAAU,wBACb,iEACA,qMACA,uBAAGI,KAAK,kDAAR,qBAGJ,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,iBAAgB,kBAAC,IAAD,CAAiBK,KAAMa,IAAWX,KAAK,QACtE,yBAAKP,UAAU,wBACb,uEACA,0OACA,uBAAGI,KAAK,kEAAR,uBChDQe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.83966626.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport './App.css';\r\n\r\nimport {faGithub, faLinkedin} from \"@fortawesome/free-brands-svg-icons\"\r\nimport {faEnvelope, faFilePdf, faBook, faTint, faPaintRoller, faIdBadge} from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport Resume from './resume.pdf';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div id=\"side-bar\">\r\n        <img id=\"profile\" src=\"images/profile.jpg\" alt=\"\"></img>\r\n        <div className=\"App-welcome\">\r\n          <h2 id=\"name\"> Victor Chen </h2> \r\n        </div>\r\n        <p id=\"aboutme\">\r\n          Hi! I'm Victor, a Computer Science student at the University of Richmond, and an aspiring Software Developer. \r\n          I enjoy building software to help others and learning new technologies along the way. \r\n          Check out some of my recent projects here!\r\n        </p>\r\n        <div id=\"links\">\r\n          <a href=\"https://github.com/vchen8761\"><FontAwesomeIcon icon={faGithub} size=\"2x\" className=\"icon\" title=\"vchen8761 @ Github\"/></a>\r\n          <a href=\"https://www.linkedin.com/in/victorchencs\"><FontAwesomeIcon icon={faLinkedin} size=\"2x\" className=\"icon\" title=\" victorchencs @ LinkedIn\"/></a>\r\n          <a href=\"mailto:vchen8761@gmail.com\"><FontAwesomeIcon icon={faEnvelope} size=\"2x\" className=\"icon\" title=\"vchen8761 @ Gmail\"/></a>\r\n          <a href={Resume} target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon={faFilePdf} size=\"2x\" className=\"icon\" title=\"Resume\"/></a>\r\n        </div>\r\n      </div>\r\n      <div id=\"projects\">\r\n        <div className=\"card\">\r\n          <div className=\"project-icons\"><FontAwesomeIcon icon={faBook} size=\"4x\"/></div>\r\n          <div className=\"project-descriptions\">\r\n            <strong> Accessible Spellbook </strong>\r\n            <p> An Alexa skill that allows visually impaired users to access spell descriptions with just their voice input. Developed with Axios and Cheerio, npm modules used for web scraping. </p>\r\n            <a href=\"https://github.com/vchen8761/spell-book-alexa-skill\">View on Github</a>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"project-icons\"><FontAwesomeIcon icon={faTint} size=\"5x\"/></div>\r\n          <div className =\"project-descriptions\">\r\n            <strong> Quarterly </strong>\r\n            <p> A Google Chrome extension that reminds users to stay hydrated and to practice self-care during extended computer usage. Developed using persistent Chrome API alarms.</p>\r\n            <a href=\"https://github.com/vchen8761/quarterly-react\"> View on Github</a>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"project-icons\"><FontAwesomeIcon icon={faPaintRoller} size=\"4x\"/></div>\r\n          <div className=\"project-descriptions\">\r\n            <strong> Anime Visual Style Transfer </strong>\r\n            <p> An application that allows users to apply style transfer from anime faces to human faces. Leverages a VGG-19 based convolutional neutral network from Tensorflow Hub.</p>\r\n            <a href=\"https://github.com/vchen8761/AI-Style-Transfer\"> View on Github</a>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"project-icons\"><FontAwesomeIcon icon={faIdBadge} size=\"5x\"/></div>\r\n          <div className=\"project-descriptions\">\r\n            <strong> Active Threat Simulation Research </strong>\r\n            <p> A multi-agent simulation of an active threat scenario using a 3D render of academic building. Developed for law enforcement and campuses to efficiently train for crises with minimal capital investment. </p>\r\n            <a href=\"https://github.com/vchen8761/Active-Threat-Simulation-Research\">View on Github</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/resume.de0866be.pdf\";"],"sourceRoot":""}