{"version":3,"sources":["resume.pdf","images/dnd.png","images/water.jpg","images/styletransfer.png","NavBar.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Navbar","light","NavbarBrand","href","className","id","NavLink","title","name","size","style","Resume","target","CardComponent","props","Card","CardImg","src","alt","borderRadius","CardBody","CardTitle","fontWeight","fontSize","CardText","text","Button","link","buttonText","App","Dnd","Water","StyleTransfer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,6PCiC5BC,MA1Bf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,OAAK,GACX,kBAACC,EAAA,EAAD,CAAaC,KAAK,IAAIC,UAAU,UAAUC,GAAG,SAA7C,iBACE,kBAACC,EAAA,EAAD,CAASF,UAAU,UAAUD,KAAK,+BAA+BI,MAAM,UACrE,kBAAC,IAAD,CAAaC,KAAK,SAASC,KAAK,KAAKC,MAAO,CAAE,qBAAsB,UAGtE,kBAACJ,EAAA,EAAD,CAASF,UAAU,UAAUD,KAAK,2CAA2CI,MAAM,YACjF,kBAAC,IAAD,CAAaC,KAAK,WAAWC,KAAK,QAGpC,kBAACH,EAAA,EAAD,CAASF,UAAU,UAAUD,KAAK,6BAA6BI,MAAM,SACnE,kBAAC,IAAD,CAAaC,KAAK,WAAWC,KAAK,QAGpC,kBAACH,EAAA,EAAD,CAASF,UAAU,UAAUD,KAAMQ,IAAQC,OAAO,SAASL,MAAM,UAC/D,kBAAC,IAAD,CAAaC,KAAK,OAAOC,KAAK,W,gDCN3BI,EAbO,SAACC,GACrB,OACE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,IAAKH,EAAMG,IAAKC,IAAI,GAAGR,MAAO,CAACS,aAAc,UACtD,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWX,MAAO,CAACY,WAAY,OAAQC,SAAU,SAAUT,EAAMP,OACjE,kBAACiB,EAAA,EAAD,KAAWV,EAAMW,OAErB,kBAACC,EAAA,EAAD,CAAQvB,KAAMW,EAAMa,MAAOb,EAAMc,c,mDCqC1BC,MAxCf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,yBAAKC,GAAG,UAAUY,IAAI,qBAAqBC,IAAI,KAC/C,yBAAKd,UAAU,eACb,wBAAIC,GAAG,QAAP,kBAEF,uBAAGA,GAAG,WAAN,0PAOF,yBAAKA,GAAG,YACN,kBAAC,EAAD,CACEY,IAAKa,IACLvB,MAAO,uBACPkB,KAAM,oLACNG,WAAY,oBACZD,KAAM,wDACR,kBAAC,EAAD,CACEV,IAAKc,IACLxB,MAAO,YACPkB,KAAM,wKACNG,WAAY,oBACZD,KAAM,iDACR,kBAAC,EAAD,CACEV,IAAKe,IACLzB,MAAO,wBACPkB,KAAM,wKACNG,WAAY,oBACZD,KAAM,sDCjCIM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e46bca24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/resume.f66875bd.pdf\";","module.exports = __webpack_public_path__ + \"static/media/dnd.6f349e09.png\";","module.exports = __webpack_public_path__ + \"static/media/water.7dab3999.jpg\";","module.exports = __webpack_public_path__ + \"static/media/styletransfer.3ae7b647.png\";","import React from 'react';\r\nimport {Navbar, NavbarBrand, NavLink } from 'reactstrap';\r\nimport './NavBar.css';\r\nimport Resume from './resume.pdf';\r\n\r\nimport FontAwesome from 'react-fontawesome';\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <div>\r\n      <Navbar light>\r\n        <NavbarBrand href=\"/\" className=\"mr-auto\" id=\"brand\"> Victor Chen </NavbarBrand>\r\n          <NavLink className=\"navlink\" href=\"https://github.com/vchen8762\" title=\"Github\"> \r\n            <FontAwesome name=\"github\" size=\"2x\" style={{ '--fa-primary-color': 'red' }}/>\r\n            {/* <span className=\"tooltiptext\">vchen8762 @ Github</span> */}\r\n          </NavLink>\r\n          <NavLink className=\"navlink\" href=\"https://www.linkedin.com/in/victorchencs\" title=\"LinkedIn\">\r\n            <FontAwesome name=\"linkedin\" size=\"2x\"/>\r\n            {/* <span className=\"tooltiptext\">victorchencs @ Linkedin</span>  */}\r\n          </NavLink>\r\n          <NavLink className=\"navlink\" href=\"mailto:vchen8762@gmail.com\" title=\"Email\">\r\n            <FontAwesome name=\"envelope\" size=\"2x\"/>\r\n            {/* <span className=\"tooltiptext\">vchen8762 @ Gmail</span> */}\r\n          </NavLink>\r\n          <NavLink className=\"navlink\" href={Resume} target=\"_blank\" title=\"Resume\">\r\n            <FontAwesome name=\"file\" size=\"2x\"/>\r\n            {/* <span className=\"tooltiptext\">Resume</span> */}\r\n          </NavLink>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport {\r\n  Card, CardImg, CardText, CardBody,\r\n  CardTitle, Button\r\n} from 'reactstrap';\r\n\r\nconst CardComponent = (props) => {\r\n  return (\r\n    <Card>\r\n        <CardImg src={props.src} alt=\"\" style={{borderRadius: \"15px\"}}/>\r\n        <CardBody>\r\n            <CardTitle style={{fontWeight: \"bold\", fontSize: \"20pt\"}}>{props.title}</CardTitle>\r\n            <CardText>{props.text}</CardText>\r\n        </CardBody>\r\n        <Button href={props.link}>{props.buttonText}</Button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardComponent;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport './App.css';\r\n\r\nimport NavBar from './NavBar';\r\nimport CardComponent from './Card';\r\n\r\nimport Dnd from './images/dnd.png';\r\nimport Water from './images/water.jpg';\r\nimport StyleTransfer from './images/styletransfer.png'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar />\r\n      <header className=\"App-header\">\r\n        <img id=\"profile\" src=\"images/profile.jpg\" alt=\"\"></img>\r\n        <div className=\"App-welcome\">\r\n          <h2 id=\"name\"> Victor Chen </h2> \r\n        </div>\r\n        <p id=\"aboutme\">\r\n          Hi! I'm Victor, a Computer Science student at the University of Richmond, and an aspiring Full-Stack Web Developer. \r\n          I enjoy building software to help others and learning new technologies along the way. \r\n          Check out some of my recent projects below!\r\n        </p>\r\n      </header>\r\n      \r\n      <div id=\"projects\">\r\n        <CardComponent\r\n          src={Dnd}\r\n          title={\"Accessible Spellbook\"}\r\n          text={\"An Alexa skill that allows visually impaired users to access spell descriptions with just their voice input. Developed with Axios and Cheerio, npm modules used for web scraping.\"}\r\n          buttonText={\"Github Repository\"}\r\n          link={\"https://github.com/vchen8761/spell-book-alexa-skill\"}/>\r\n        <CardComponent\r\n          src={Water}\r\n          title={\"Quarterly\"}\r\n          text={\"A Google Chrome extension that reminds users to stay hydrated and to practice self-care during extended computer usage. Developed using persistent Chrome API alarms.\"}\r\n          buttonText={\"Github Repository\"}\r\n          link={\"https://github.com/vchen8761/quarterly-react\"}/>\r\n        <CardComponent\r\n          src={StyleTransfer}\r\n          title={\"Neural Style Transfer\"}\r\n          text={\"An application that allows users to apply style transfer from anime faces to human faces. Leverages a VGG-19 based convolutional neutral network from Tensorflow Hub.\"}\r\n          buttonText={\"Github Repository\"}\r\n          link={\"https://github.com/vchen8761/AI-Style-Transfer\"}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}